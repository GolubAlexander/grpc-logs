// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggerClient interface {
	FetchLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Logger_FetchLogsClient, error)
}

type loggerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggerClient(cc grpc.ClientConnInterface) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) FetchLogs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Logger_FetchLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logger_serviceDesc.Streams[0], "/logger.Logger/FetchLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerFetchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logger_FetchLogsClient interface {
	Recv() (*LogMessage, error)
	grpc.ClientStream
}

type loggerFetchLogsClient struct {
	grpc.ClientStream
}

func (x *loggerFetchLogsClient) Recv() (*LogMessage, error) {
	m := new(LogMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggerServer is the server API for Logger service.
// All implementations must embed UnimplementedLoggerServer
// for forward compatibility
type LoggerServer interface {
	FetchLogs(*Empty, Logger_FetchLogsServer) error
	mustEmbedUnimplementedLoggerServer()
}

// UnimplementedLoggerServer must be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (UnimplementedLoggerServer) FetchLogs(*Empty, Logger_FetchLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchLogs not implemented")
}
func (UnimplementedLoggerServer) mustEmbedUnimplementedLoggerServer() {}

// UnsafeLoggerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggerServer will
// result in compilation errors.
type UnsafeLoggerServer interface {
	mustEmbedUnimplementedLoggerServer()
}

func RegisterLoggerServer(s grpc.ServiceRegistrar, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_FetchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerServer).FetchLogs(m, &loggerFetchLogsServer{stream})
}

type Logger_FetchLogsServer interface {
	Send(*LogMessage) error
	grpc.ServerStream
}

type loggerFetchLogsServer struct {
	grpc.ServerStream
}

func (x *loggerFetchLogsServer) Send(m *LogMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logger.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchLogs",
			Handler:       _Logger_FetchLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logger.server",
}
